//These tests require Mocha to run correctly.//http://visionmedia.github.io/mochavar assert = require('assert')var JSONAutoTree = require('./index.js');var nodeTree = new JSONAutoTree('./examples/nodes/')//The filename passed to your JSONAutoTree is relative to the location of the//actual module. I do not think there is seriously a better way.var fs = require('fs');nodeTree.automateBranches();var apartment = nodeTree.getNode('apartment');var park = nodeTree.getNode('park');var building = nodeTree.getNode('building');var school = nodeTree.getNode('school');var testCallback = function(branch) {    //This is a callback we'll pass the walkTypes function that will specifically    //guide the tree walker to pick a house "leaf" node, but to continue walking    //a branch if it has children.        //Note that this example has little real-world application.    var isLegal = false;    if (branch.hasOwnProperty('children')        || branch.type == 'school') {        console.log('Branch of type ' + branch.type + ' agreed to be legal.');        isLegal = true;    } else {        console.log('Branch of type ' + branch.type + ' not allowed.');    }        return isLegal;}var callbacktest = nodeTree.walkTypes(nodeTree.tree, testCallback);describe('nodeTree testing means it should have Nodetype ', function(){    it("'apartment' inherit 'random' as its shape", function() {        assert.equal('random', apartment.shape);    });    it("'park' inherit '1-2' as its size", function() {        assert.equal('1-2', park.size);    });    it("'building' with child 'apartment'", function() {        assert.equal(apartment, building.children.apartment);    });    it("'school' after a callback guides it to school", function() {        assert.equal(callbacktest.type, school.type);    });});